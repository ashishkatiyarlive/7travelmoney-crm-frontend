{"ast":null,"code":"import { FormControl, FormGroup, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/common\";\nconst _c0 = a0 => ({\n  \"is-invalid\": a0\n});\nfunction LoginComponent_div_11_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Email is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_div_11_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Invalid email format\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_div_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 11);\n    i0.ɵɵtemplate(1, LoginComponent_div_11_div_1_Template, 2, 0, \"div\", 12)(2, LoginComponent_div_11_div_2_Template, 2, 0, \"div\", 12);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.f[\"email\"].errors[\"required\"]);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.f[\"email\"].errors[\"email\"]);\n  }\n}\nfunction LoginComponent_div_16_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Password is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_div_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 11);\n    i0.ɵɵtemplate(1, LoginComponent_div_16_div_1_Template, 2, 0, \"div\", 12);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.f[\"password\"].errors[\"required\"]);\n  }\n}\n//import Validation from './utils/validation';\nexport class LoginComponent {\n  // loginForm!: FormGroup;\n  constructor(formBuilder) {\n    this.formBuilder = formBuilder;\n    this.loginForm = new FormGroup({\n      email: new FormControl(''),\n      password: new FormControl('')\n    });\n    this.touched = false;\n  }\n  // ngOnInit(){\n  //   this.loginForm = this.formBuilder.group({\n  //     email: ['', [Validators.required, Validators.email]],\n  //     password: ['', Validators.required]\n  //   });\n  // }\n  onSubmit() {\n    if (this.loginForm.valid) {\n      // console.log('Form Submitted!');\n      // console.log('Email:', this.loginForm.value.email);\n      // console.log('Password:', this.loginForm.value.password);\n      // You can add your authentication logic here\n    } else {\n      console.error('Form is invalid');\n    }\n  }\n  ngOnInit() {\n    this.loginForm = this.formBuilder.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', Validators.required]\n    });\n  }\n  get f() {\n    return this.loginForm.controls;\n  }\n  static #_ = this.ɵfac = function LoginComponent_Factory(t) {\n    return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: LoginComponent,\n    selectors: [[\"app-login\"]],\n    decls: 19,\n    vars: 9,\n    consts: [[1, \"container\", \"mt-5\"], [1, \"row\"], [1, \"col-12\", \"text-center\", \"justify-content-center\"], [\"src\", \"../../assets/images/7janpathforex-logo.png\", \"alt\", \"logo\", 1, \"img-thumbnail\", \"img-fluid\", \"login-logo\"], [1, \"col-12\"], [3, \"ngSubmit\", \"formGroup\"], [1, \"form-group\"], [\"type\", \"email\", \"formControlName\", \"email\", 1, \"form-control\", 3, \"ngClass\"], [\"class\", \"text-danger\", 4, \"ngIf\"], [\"type\", \"password\", \"formControlName\", \"password\", 1, \"form-control\", 3, \"ngClass\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\"], [1, \"text-danger\"], [4, \"ngIf\"]],\n    template: function LoginComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2);\n        i0.ɵɵelement(3, \"img\", 3);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(4, \"div\", 1)(5, \"div\", 4)(6, \"form\", 5);\n        i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_Template_form_ngSubmit_6_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelementStart(7, \"div\", 6)(8, \"label\");\n        i0.ɵɵtext(9, \"Email\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(10, \"input\", 7);\n        i0.ɵɵtemplate(11, LoginComponent_div_11_Template, 3, 2, \"div\", 8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"div\", 6)(13, \"label\");\n        i0.ɵɵtext(14, \"Password\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(15, \"input\", 9);\n        i0.ɵɵtemplate(16, LoginComponent_div_16_Template, 2, 1, \"div\", 8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"button\", 10);\n        i0.ɵɵtext(18, \"Login\");\n        i0.ɵɵelementEnd()()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"formGroup\", ctx.loginForm);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(5, _c0, ctx.touched && ctx.f[\"email\"].errors));\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngIf\", ctx.f[\"email\"].errors);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(7, _c0, ctx.touched && ctx.f[\"password\"].errors));\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngIf\", ctx.f[\"password\"].errors);\n      }\n    },\n    dependencies: [i2.NgClass, i2.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName],\n    styles: [\".login-logo[_ngcontent-%COMP%]{\\n    max-width: 200px;\\n    border-radius: 50% 50%;\\n}\\n\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvbG9naW4vbG9naW4uY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLGdCQUFnQjtJQUNoQixzQkFBc0I7QUFDMUIiLCJzb3VyY2VzQ29udGVudCI6WyIubG9naW4tbG9nb3tcclxuICAgIG1heC13aWR0aDogMjAwcHg7XHJcbiAgICBib3JkZXItcmFkaXVzOiA1MCUgNTAlO1xyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n  });\n}","map":{"version":3,"names":["FormControl","FormGroup","Validators","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵtemplate","LoginComponent_div_11_div_1_Template","LoginComponent_div_11_div_2_Template","ɵɵadvance","ɵɵproperty","ctx_r0","f","errors","LoginComponent_div_16_div_1_Template","LoginComponent","constructor","formBuilder","loginForm","email","password","touched","onSubmit","valid","console","error","ngOnInit","group","required","controls","_","ɵɵdirectiveInject","i1","FormBuilder","_2","selectors","decls","vars","consts","template","LoginComponent_Template","rf","ctx","ɵɵelement","ɵɵlistener","LoginComponent_Template_form_ngSubmit_6_listener","LoginComponent_div_11_Template","LoginComponent_div_16_Template","ɵɵpureFunction1","_c0"],"sources":["D:\\Projects\\7travelMoneyCRM\\7travelmoney-crm-frontend\\src\\app\\login\\login.component.ts","D:\\Projects\\7travelMoneyCRM\\7travelmoney-crm-frontend\\src\\app\\login\\login.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { AbstractControl, FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\n//import Validation from './utils/validation';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  // loginForm!: FormGroup;\r\n\r\n  constructor(private formBuilder: FormBuilder) {\r\n    \r\n  }\r\n  // ngOnInit(){\r\n  //   this.loginForm = this.formBuilder.group({\r\n  //     email: ['', [Validators.required, Validators.email]],\r\n  //     password: ['', Validators.required]\r\n  //   });\r\n  // }\r\n\r\n  onSubmit() {\r\n    if (this.loginForm.valid) {\r\n      // console.log('Form Submitted!');\r\n      // console.log('Email:', this.loginForm.value.email);\r\n      // console.log('Password:', this.loginForm.value.password);\r\n      // You can add your authentication logic here\r\n    } else {\r\n      console.error('Form is invalid');\r\n    }\r\n  }\r\n\r\n  loginForm: FormGroup = new FormGroup({\r\n    email: new FormControl(''),\r\n    password: new FormControl(''),\r\n  });\r\n  touched = false;\r\n\r\n  ngOnInit(): void{\r\n    this.loginForm = this.formBuilder.group({\r\n      email: ['', [Validators.required, Validators.email]],\r\n      password: ['', Validators.required]\r\n    });\r\n  }\r\n  get f(): { [key: string]: AbstractControl } {\r\n    return this.loginForm.controls;\r\n  }\r\n}\r\n","<div class=\"container mt-5\">\r\n  <div class=\"row\">\r\n  <div class=\"col-12 text-center justify-content-center \">\r\n    <img src=\"../../assets/images/7janpathforex-logo.png\" class=\"img-thumbnail img-fluid login-logo\" alt=\"logo\">\r\n  </div>\r\n  </div>\r\n  <div class=\"row\">\r\n  <div class=\"col-12\">\r\n    <form [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\">\r\n      <div class=\"form-group\">\r\n        <label>Email</label>\r\n        <input type=\"email\" class=\"form-control\" formControlName=\"email\" [ngClass]=\"{ 'is-invalid': touched && f['email'].errors }\">\r\n        <div *ngIf=\"f['email'].errors\" class=\"text-danger\">\r\n          <div *ngIf=\"f['email'].errors['required']\">Email is required</div>\r\n          <div *ngIf=\"f['email'].errors['email']\">Invalid email format</div>\r\n        </div>\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <label>Password</label>\r\n        <input type=\"password\" class=\"form-control\" formControlName=\"password\" [ngClass]=\"{ 'is-invalid': touched && f['password'].errors }\">\r\n        <div *ngIf=\"f['password'].errors\" class=\"text-danger\">\r\n          <div *ngIf=\"f['password'].errors['required']\">Password is required</div>\r\n        </div>\r\n      </div>\r\n      <button type=\"submit\" class=\"btn btn-primary\">Login</button>\r\n    </form>\r\n  </div>\r\n  </div>\r\n    \r\n  </div>\r\n  "],"mappings":"AACA,SAAuCA,WAAW,EAAEC,SAAS,EAAEC,UAAU,QAAQ,gBAAgB;;;;;;;;;ICYvFC,EAAA,CAAAC,cAAA,UAA2C;IAAAD,EAAA,CAAAE,MAAA,wBAAiB;IAAAF,EAAA,CAAAG,YAAA,EAAM;;;;;IAClEH,EAAA,CAAAC,cAAA,UAAwC;IAAAD,EAAA,CAAAE,MAAA,2BAAoB;IAAAF,EAAA,CAAAG,YAAA,EAAM;;;;;IAFpEH,EAAA,CAAAC,cAAA,cAAmD;IAEjDD,EADA,CAAAI,UAAA,IAAAC,oCAAA,kBAA2C,IAAAC,oCAAA,kBACH;IAC1CN,EAAA,CAAAG,YAAA,EAAM;;;;IAFEH,EAAA,CAAAO,SAAA,EAAmC;IAAnCP,EAAA,CAAAQ,UAAA,SAAAC,MAAA,CAAAC,CAAA,UAAAC,MAAA,aAAmC;IACnCX,EAAA,CAAAO,SAAA,EAAgC;IAAhCP,EAAA,CAAAQ,UAAA,SAAAC,MAAA,CAAAC,CAAA,UAAAC,MAAA,UAAgC;;;;;IAOtCX,EAAA,CAAAC,cAAA,UAA8C;IAAAD,EAAA,CAAAE,MAAA,2BAAoB;IAAAF,EAAA,CAAAG,YAAA,EAAM;;;;;IAD1EH,EAAA,CAAAC,cAAA,cAAsD;IACpDD,EAAA,CAAAI,UAAA,IAAAQ,oCAAA,kBAA8C;IAChDZ,EAAA,CAAAG,YAAA,EAAM;;;;IADEH,EAAA,CAAAO,SAAA,EAAsC;IAAtCP,EAAA,CAAAQ,UAAA,SAAAC,MAAA,CAAAC,CAAA,aAAAC,MAAA,aAAsC;;;ADnBtD;AAOA,OAAM,MAAOE,cAAc;EACzB;EAEAC,YAAoBC,WAAwB;IAAxB,KAAAA,WAAW,GAAXA,WAAW;IAqB/B,KAAAC,SAAS,GAAc,IAAIlB,SAAS,CAAC;MACnCmB,KAAK,EAAE,IAAIpB,WAAW,CAAC,EAAE,CAAC;MAC1BqB,QAAQ,EAAE,IAAIrB,WAAW,CAAC,EAAE;KAC7B,CAAC;IACF,KAAAsB,OAAO,GAAG,KAAK;EAvBf;EACA;EACA;EACA;EACA;EACA;EACA;EAEAC,QAAQA,CAAA;IACN,IAAI,IAAI,CAACJ,SAAS,CAACK,KAAK,EAAE;MACxB;MACA;MACA;MACA;IAAA,CACD,MAAM;MACLC,OAAO,CAACC,KAAK,CAAC,iBAAiB,CAAC;IAClC;EACF;EAQAC,QAAQA,CAAA;IACN,IAAI,CAACR,SAAS,GAAG,IAAI,CAACD,WAAW,CAACU,KAAK,CAAC;MACtCR,KAAK,EAAE,CAAC,EAAE,EAAE,CAAClB,UAAU,CAAC2B,QAAQ,EAAE3B,UAAU,CAACkB,KAAK,CAAC,CAAC;MACpDC,QAAQ,EAAE,CAAC,EAAE,EAAEnB,UAAU,CAAC2B,QAAQ;KACnC,CAAC;EACJ;EACA,IAAIhB,CAACA,CAAA;IACH,OAAO,IAAI,CAACM,SAAS,CAACW,QAAQ;EAChC;EAAC,QAAAC,CAAA,G;qBAtCUf,cAAc,EAAAb,EAAA,CAAA6B,iBAAA,CAAAC,EAAA,CAAAC,WAAA;EAAA;EAAA,QAAAC,EAAA,G;UAAdnB,cAAc;IAAAoB,SAAA;IAAAC,KAAA;IAAAC,IAAA;IAAAC,MAAA;IAAAC,QAAA,WAAAC,wBAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QCPzBvC,EAFF,CAAAC,cAAA,aAA4B,aACT,aACuC;QACtDD,EAAA,CAAAyC,SAAA,aAA4G;QAE9GzC,EADA,CAAAG,YAAA,EAAM,EACA;QAGJH,EAFF,CAAAC,cAAA,aAAiB,aACG,cACoC;QAAxBD,EAAA,CAAA0C,UAAA,sBAAAC,iDAAA;UAAA,OAAYH,GAAA,CAAApB,QAAA,EAAU;QAAA,EAAC;QAEjDpB,EADF,CAAAC,cAAA,aAAwB,YACf;QAAAD,EAAA,CAAAE,MAAA,YAAK;QAAAF,EAAA,CAAAG,YAAA,EAAQ;QACpBH,EAAA,CAAAyC,SAAA,gBAA4H;QAC5HzC,EAAA,CAAAI,UAAA,KAAAwC,8BAAA,iBAAmD;QAIrD5C,EAAA,CAAAG,YAAA,EAAM;QAEJH,EADF,CAAAC,cAAA,cAAwB,aACf;QAAAD,EAAA,CAAAE,MAAA,gBAAQ;QAAAF,EAAA,CAAAG,YAAA,EAAQ;QACvBH,EAAA,CAAAyC,SAAA,gBAAqI;QACrIzC,EAAA,CAAAI,UAAA,KAAAyC,8BAAA,iBAAsD;QAGxD7C,EAAA,CAAAG,YAAA,EAAM;QACNH,EAAA,CAAAC,cAAA,kBAA8C;QAAAD,EAAA,CAAAE,MAAA,aAAK;QAKvDF,EALuD,CAAAG,YAAA,EAAS,EACvD,EACH,EACA,EAEA;;;QArBEH,EAAA,CAAAO,SAAA,GAAuB;QAAvBP,EAAA,CAAAQ,UAAA,cAAAgC,GAAA,CAAAxB,SAAA,CAAuB;QAGwChB,EAAA,CAAAO,SAAA,GAA0D;QAA1DP,EAAA,CAAAQ,UAAA,YAAAR,EAAA,CAAA8C,eAAA,IAAAC,GAAA,EAAAP,GAAA,CAAArB,OAAA,IAAAqB,GAAA,CAAA9B,CAAA,UAAAC,MAAA,EAA0D;QACrHX,EAAA,CAAAO,SAAA,EAAuB;QAAvBP,EAAA,CAAAQ,UAAA,SAAAgC,GAAA,CAAA9B,CAAA,UAAAC,MAAA,CAAuB;QAO0CX,EAAA,CAAAO,SAAA,GAA6D;QAA7DP,EAAA,CAAAQ,UAAA,YAAAR,EAAA,CAAA8C,eAAA,IAAAC,GAAA,EAAAP,GAAA,CAAArB,OAAA,IAAAqB,GAAA,CAAA9B,CAAA,aAAAC,MAAA,EAA6D;QAC9HX,EAAA,CAAAO,SAAA,EAA0B;QAA1BP,EAAA,CAAAQ,UAAA,SAAAgC,GAAA,CAAA9B,CAAA,aAAAC,MAAA,CAA0B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}